# This workflow will build a Node.js project and deploy it to an Azure Functions App on Windows or Linux when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure Functions app.
# For instructions see:
#   - https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-node
#   - https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-typescript
#
# To configure this workflow:
# 1. Set up the following secrets in your repository:
#   - AZURE_FUNCTIONAPP_PUBLISH_PROFILE
# 2. Change env variables for your configuration.
#
# For more information on:
#   - GitHub Actions for Azure: https://github.com/Azure/Actions
#   - Azure Functions Action: https://github.com/Azure/functions-action
#   - Publish Profile: https://github.com/Azure/functions-action#using-publish-profile-as-deployment-credential-recommended
#   - Azure Service Principal for RBAC: https://github.com/Azure/functions-action#using-azure-service-principal-for-rbac-as-deployment-credential
#
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples/tree/master/FunctionApp

name: Deploy Node.js project to Azure Function App

on:
  push:
    branches:
    - "dev"
    paths:
      - src/UserManagement/**
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_NAME: 'UserManagement'   # set this to your function app name on Azure
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'src/UserManagement'       # set this to the path to your function app project, defaults to the repository root
  NODE_VERSION: '16.x'                      # set this to the node version to use (e.g. '8.x', '10.x', '12.x')
  RESOURCE_GROUP_NAME_DEV: 'rg-someroc-dev'
  RESOURCE_FUNCTIONAPP_NAME_DEV: 'func-someroc-userManagement-dev'

# gh workflow run azure-functions-app-nodejs.yml --ref dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # For Linux, use ubuntu-latest
    environment: dev
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v3

    - name: Login via Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}
        enable-AzPSSession: true

    - name: Azure PowerShell Action
      uses: Azure/powershell@v1
      with:
        # Specify the Az PowerShell script here.
        inlineScript: Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force
        azPSVersion: latest
        errorActionPreference: Stop
        failOnStandardError: true
        
    # Default
    # - name: Setup Node ${{ env.NODE_VERSION }} Environment
    #   uses: actions/setup-node@v3
    #   with:
    #     node-version: ${{ env.NODE_VERSION }}

    # # Default
    # - name: 'Resolve Project Dependencies Using Npm'
    #   shell: bash # For Linux, use bash
    #   run: |
    #     pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
    #     npm install
    #     npm run build --if-present
    #     npm run test --if-present
    #     popd

    - name: 'Get FunctionApp publish profile'
      id: publishprofile
      uses: aliencube/publish-profile-actions@v1
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_DEV }}
      with:
        resourceGroupName: ${{ env.RESOURCE_GROUP_NAME_DEV }}
        appName: ${{ env.RESOURCE_FUNCTIONAPP_NAME_DEV }}

    # Default
    - name: 'Deploy FunctionApp'
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ env.RESOURCE_FUNCTIONAPP_NAME_DEV }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        publish-profile: ${{ steps.publishprofile.outputs.profile }}

    - name: 'Reset FunctionApp publish profile'
      uses: aliencube/publish-profile-actions@v1
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_DEV }}
      with:
        resourceGroupName: ${{ env.RESOURCE_GROUP_NAME_DEV }}
        appName: ${{ env.RESOURCE_FUNCTIONAPP_NAME_DEV }}
        reset: true
