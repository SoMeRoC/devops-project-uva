name: Deploy Function
on:
  push:
    # Sequence of patterns matched against refs/heads
    branches:
      - main


defaults:
  run:
    working-directory: 'infrastructure/dev'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    steps:
    - uses: actions/checkout@v2

    - name: HashiCorp - Setup Terraform
      # You may pin to the exact commit or the version.
      # uses: hashicorp/setup-terraform@633666f66e0061ca3b725c73b2ec20cd13a8fdd1
      uses: hashicorp/setup-terraform@v2.0.3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config "./backend-dev.cfg"

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan

      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: terraform apply -auto-approve


    # - if: github.event.inputs.terraform_destroy == 'true'
    #   name: Terraform Destroy
    #   run: terraform destroy -auto-approve
